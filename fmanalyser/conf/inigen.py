# -*- coding: utf-8 -*-
import fmanalyser
from fmanalyser.utils.command import BaseCommand
from fmanalyser.conf import fmconfig
from optparse import make_option
import sys
import os
import datetime
import textwrap

DEFAULT_INI_OUTPUT = os.path.join(os.path.dirname(fmanalyser.__file__),
                                  os.pardir,
                                  'conf.example.ini')
HEADER_TEMPLATE = \
"""; FM Analyser example configuration file
; Generated by %(scriptname)s %(version)s, %(now)s
"""

class Command(BaseCommand):
    
    base_options = BaseCommand.base_options + (
        make_option('-o', '--output',
            default=DEFAULT_INI_OUTPUT,
            help='output file',
        ),
    )
    
    def execute(self):
        f = os.path.abspath(self.options.output)
        with open(f, 'w') as fp:
            self.dump(fp)
        
        self.logger.info('%s written' % f)
    
    def dump(self, fp):
        header = HEADER_TEMPLATE % {
            'scriptname': os.path.basename(__file__),
            'version': fmanalyser.__version__,
            'now': datetime.datetime.now(),
        }
        fp.write(header + '\n')
        
        for Section in fmconfig.Config.section_classes:
            fp.write('; Section: %s\n' % Section.basename)
            self._wrap_description(Section.ini_help, fp)
            fp.write('[%s]\n' % Section.basename)
            for k, option in Section._options.items():
                default = option.unclean(option.default)
                reqdef = ''
                if option.required:
                    reqdef += ' Required.'
                else:
                    reqdef += ' Default: %s.' % default
                if option.ini_help:
                    self._wrap_description(option.ini_help, fp)
                    fp.write(';%s\n' % reqdef)
                else:
                    fp.write('; %s.%s\n' % (k, reqdef))
                if option.choices:
                    fp.write('; Choices: [%s]\n' % ', '.join(str(c) for c in option.choices))
                fp.write('%s = %s\n' % (k, default))
                fp.write('\n')
            fp.write('\n')
            
    def _wrap_description(self, s, fp):
        for l in s.splitlines():
            fp.write('; %s\n' % l)
            
def main():
    return Command().run()

if __name__ == '__main__':
    sys.exit(main())