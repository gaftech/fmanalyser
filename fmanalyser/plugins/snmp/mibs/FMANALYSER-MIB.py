# PySNMP SMI module. Autogenerated from smidump -f python FMANALYSER-MIB
# by libsmi2pysnmp-0.1.3 at Thu May  3 15:04:43 2012,
# Python version (2, 6, 7, 'final', 0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue")

# Types

class DeviationLevel(TextualConvention, Integer32):
    displayHint = "d-3"
    

# Objects

gaftech = MibIdentifier((1, 3, 6, 1, 4, 1, 999999))
fmanalyser = ModuleIdentity((1, 3, 6, 1, 4, 1, 999999, 1)).setRevisions(("2012-05-03 13:04",))
if mibBuilder.loadTexts: fmanalyser.setOrganization("Gaftech")
if mibBuilder.loadTexts: fmanalyser.setContactInfo("gabriel@gaftech.fr")
if mibBuilder.loadTexts: fmanalyser.setDescription("The MIB module for fmanalyser snmp plugin")
device = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 1))
online = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: online.setDescription("The device online/offline status.")
analyser = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2))
channels = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1))
channelTable = MibTable((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1))
if mibBuilder.loadTexts: channelTable.setDescription("channel table")
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1)).setIndexNames((0, "FMANALYSER-MIB", "channelIndex"))
if mibBuilder.loadTexts: channelEntry.setDescription("entry in channel table")
channelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: channelIndex.setDescription("channel index")
channelName = MibTableColumn((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelName.setDescription("channel identifer")
channelVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4))
frequencyChannelVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 1))
frequencyKey = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyKey.setDescription("the variable string identifier")
frequencyValue = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyValue.setDescription("the last measured value")
frequencyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 1, 10))
frequencyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 1, 10, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyEnabled.setDescription("enabled option for frequency variable")
frequencyRef = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyRef.setDescription("ref option for frequency variable")
rfChannelVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2))
rfKey = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfKey.setDescription("the variable string identifier")
rfValue = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfValue.setDescription("the last measured value")
rfOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 10))
rfEnabled = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 10, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfEnabled.setDescription("enabled option for rf variable")
rfRef = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRef.setDescription("ref option for rf variable")
rfHigh = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfHigh.setDescription("high option for rf variable")
rfLow = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 2, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfLow.setDescription("low option for rf variable")
qualityChannelVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 3))
qualityKey = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qualityKey.setDescription("the variable string identifier")
qualityValue = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qualityValue.setDescription("the last measured value")
qualityOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 3, 10))
qualityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 3, 10, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qualityEnabled.setDescription("enabled option for quality variable")
qualityRef = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qualityRef.setDescription("ref option for quality variable")
pilotChannelVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4))
pilotKey = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pilotKey.setDescription("the variable string identifier")
pilotValue = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 2), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pilotValue.setDescription("the last measured value")
pilotOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 10))
pilotEnabled = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 10, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pilotEnabled.setDescription("enabled option for pilot variable")
pilotRef = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 10, 2), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pilotRef.setDescription("ref option for pilot variable")
pilotHigh = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 10, 3), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pilotHigh.setDescription("high option for pilot variable")
pilotLow = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 4, 10, 4), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pilotLow.setDescription("low option for pilot variable")
rdsChannelVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5))
rdsKey = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdsKey.setDescription("the variable string identifier")
rdsValue = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 2), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdsValue.setDescription("the last measured value")
rdsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 10))
rdsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 10, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdsEnabled.setDescription("enabled option for rds variable")
rdsRef = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 10, 2), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdsRef.setDescription("ref option for rds variable")
rdsHigh = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 10, 3), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdsHigh.setDescription("high option for rds variable")
rdsLow = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 2, 1, 1, 1, 4, 5, 10, 4), DeviationLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdsLow.setDescription("low option for rds variable")
software = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 8))
softVersion = MibScalar((1, 3, 6, 1, 4, 1, 999999, 1, 8, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softVersion.setDescription("fmanalyser software version")
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 9))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 999999, 1, 9, 2))

# Augmentions

# Groups

staticValues = ObjectGroup((1, 3, 6, 1, 4, 1, 999999, 1, 9, 2, 1)).setObjects(*(("FMANALYSER-MIB", "channelName"), ("FMANALYSER-MIB", "softVersion"), ) )
if mibBuilder.loadTexts: staticValues.setDescription("static informations")
liveValues = ObjectGroup((1, 3, 6, 1, 4, 1, 999999, 1, 9, 2, 2)).setObjects(*(("FMANALYSER-MIB", "online"), ) )
if mibBuilder.loadTexts: liveValues.setDescription("live informations")

# Compliances

mibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 999999, 1, 9, 1, 1)).setObjects(*(("FMANALYSER-MIB", "staticValues"), ("FMANALYSER-MIB", "liveValues"), ) )
if mibBuilder.loadTexts: mibCompliance.setDescription("our compliance")

# Exports

# Module identity
mibBuilder.exportSymbols("FMANALYSER-MIB", PYSNMP_MODULE_ID=fmanalyser)

# Types
mibBuilder.exportSymbols("FMANALYSER-MIB", DeviationLevel=DeviationLevel)

# Objects
mibBuilder.exportSymbols("FMANALYSER-MIB", gaftech=gaftech, fmanalyser=fmanalyser, device=device, online=online, analyser=analyser, channels=channels, channelTable=channelTable, channelEntry=channelEntry, channelIndex=channelIndex, channelName=channelName, channelVariables=channelVariables, frequencyChannelVariable=frequencyChannelVariable, frequencyKey=frequencyKey, frequencyValue=frequencyValue, frequencyOptions=frequencyOptions, frequencyEnabled=frequencyEnabled, frequencyRef=frequencyRef, rfChannelVariable=rfChannelVariable, rfKey=rfKey, rfValue=rfValue, rfOptions=rfOptions, rfEnabled=rfEnabled, rfRef=rfRef, rfHigh=rfHigh, rfLow=rfLow, qualityChannelVariable=qualityChannelVariable, qualityKey=qualityKey, qualityValue=qualityValue, qualityOptions=qualityOptions, qualityEnabled=qualityEnabled, qualityRef=qualityRef, pilotChannelVariable=pilotChannelVariable, pilotKey=pilotKey, pilotValue=pilotValue, pilotOptions=pilotOptions, pilotEnabled=pilotEnabled, pilotRef=pilotRef, pilotHigh=pilotHigh, pilotLow=pilotLow, rdsChannelVariable=rdsChannelVariable, rdsKey=rdsKey, rdsValue=rdsValue, rdsOptions=rdsOptions, rdsEnabled=rdsEnabled, rdsRef=rdsRef, rdsHigh=rdsHigh, rdsLow=rdsLow, software=software, softVersion=softVersion, conformance=conformance, compliances=compliances, groups=groups)

# Groups
mibBuilder.exportSymbols("FMANALYSER-MIB", staticValues=staticValues, liveValues=liveValues)

# Compliances
mibBuilder.exportSymbols("FMANALYSER-MIB", mibCompliance=mibCompliance)
